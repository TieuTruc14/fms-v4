<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <bean id="beanServer" class="com.eposi.fms.Server" scope="singleton"/>
    <bean id="beanLogParserService" class="com.eposi.fms.LogParserService" init-method="start" scope="singleton"></bean>
    <bean id="beanRealtimeExecutor" class="com.eposi.fms.RealtimeExecutor" init-method="init" scope="singleton">
        <property name="poolSize" value="${fms.executor.poolSize}" />
        <property name="maxMsgPerVehicle" value="${fms.executor.maxMsgPerVehicle}" />
        <property name="msxMsgProcessingCurrent" value="${fms.executor.msxMsgProcessingCurrent}" />
    </bean>
    <bean id="beanVehicleProcessor" class="com.eposi.fms.VehicleProcessor" init-method="init"  scope="singleton"/>

    <!-- DATA LOGGING -->
    <bean id="beanReportFileStore" class="com.eposi.fms.services.ReportFileStore" scope="singleton" init-method="init"/>
    <bean id="beanReportMessageProcessor" class="com.eposi.fms.ReportMessageProcessor" init-method="init"  scope="singleton" />

    <!--Geofence -->
    <bean id="beanDataLoader" class="com.eposi.fms.geofence.DataLoader" scope="singleton" init-method="load"/>

    <!-- DAO -->
    <bean id="beanFmsDao" class="com.eposi.fms.persitence.FmsDao" scope="singleton" />
    <bean id="beanDaoUtil" class="com.eposi.common.persitence.DaoUtil" scope="singleton" />
    <bean id="beanHibernateUtil" class="com.eposi.common.persitence.HibernateUtil" scope="singleton" />

    <!-- Rest Client -->
    <bean id="beanRWsClient" class="com.eposi.fms.rest.client.RWsClient" scope="singleton" init-method="start">
        <property name="mgr" ref="beanPoolingHttpClientConnectionManager"/>
        <property name="rootURI" value="${rws.rootURI}"/>
        <property name="port" value="${rws.port}"/>
        <property name="username" value="${rws.username}"/>
        <property name="password" value="${rws.password}"/>
    </bean>

    <bean id="beanPoolingHttpClientConnectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" scope="singleton" destroy-method="shutdown">
        <property name="maxTotal" value="200"/>
        <property name="defaultMaxPerRoute" value="100"/>
        <property name="validateAfterInactivity" value="1000"/>
    </bean>

    <bean id="idleConnectionMonitorThread"  class="com.eposi.fms.rest.client.IdleConnectionMonitorThread" scope="singleton" init-method="start" destroy-method="shutdown">
        <constructor-arg name="connMgr" ref="beanPoolingHttpClientConnectionManager"/>
        <constructor-arg name="idleTimeoutInMS" value="300000"/>
    </bean>

    <!-- Hazelcast -->
    <bean id="beanHazelcastClientMapAkka" class="com.eposi.fms.services.HazelcastClientMapAkka" init-method="init" scope="singleton" />
    <bean id="beanHazelcastCacheClient" class="com.eposi.fms.services.HazelcastCacheClient"  init-method="start" scope="singleton">
        <property name="addresses">
            <list>
                <value>${fms.hazelcast.address1}</value>
                <value>${fms.hazelcast.address2}</value>
            </list>
        </property>
        <property name="username" value="${fms.hazelcast.username}" />
        <property name="password" value="${fms.hazelcast.password}" />
    </bean>

    <!-- AMQP -->
    <bean id="beanQueueingConsumerClient" class="com.eposi.fms.services.QueueingConsumerClient" init-method="start" destroy-method="shutdown" scope="singleton">
        <property name="addresses">
            <list>
                <value>${fms.amqp.queue.input.address1}</value>
            </list>
        </property>
        <property name="username" value="${fms.amqp.queue.input.username}" />
        <property name="password" value="${fms.amqp.queue.input.password}" />
        <property name="queuename" value="${fms.amqp.queue.input.queuename}" />
    </bean>

    <bean id="beanQueueingConsumerReportClient" class="com.eposi.fms.services.QueueingConsumerReportClient" init-method="start" destroy-method="shutdown" scope="singleton">
        <property name="addresses">
            <list>
                <value>${fms.amqp.queue.statistics.address}</value>
            </list>
        </property>
        <property name="username" value="${fms.amqp.queue.statistics.username}" />
        <property name="password" value="${fms.amqp.queue.statistics.password}" />
        <property name="exchangename" value="${fms.amqp.queue.statistics.exchangename}" />
    </bean>

    <!--XLS-->
    <bean id="beanReverseGeocodingClient" class="com.eposi.xls.reversegeocoding.client.ReverseGeocodingClient" scope="singleton" init-method="start" destroy-method="shutdown" >
        <property name="url" value="${xls.reversegeocoding.url}" />
    </bean>
    <bean id="beanXlsClient" class="com.eposi.fms.services.XlsClient" scope="singleton" init-method="init"/>

    <!-- DATA SOURCE -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" scope="singleton">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties"><ref bean="hibernateProperties" /></property>
        <property name="mappingResources">
            <list>
                <value>com/eposi/fms/model/Vehicle.hbm.xml</value>
                <value>com/eposi/fms/model/Driver.hbm.xml</value>
                <value>com/eposi/fms/model/TransportType.hbm.xml</value>
                <value>com/eposi/fms/model/Report.hbm.xml</value>
                <value>com/eposi/fms/model/Company.hbm.xml</value>
                <value>com/eposi/fms/model/Province.hbm.xml</value>
                <value>com/eposi/fms/model/ExpressWay.hbm.xml</value>
                <value>com/eposi/fms/model/Charging.hbm.xml</value>
                <value>com/eposi/fms/model/Device.hbm.xml</value>
                <value>com/eposi/fms/model/Batch.hbm.xml</value>
            </list>
        </property>
    </bean>
    <bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean" scope="singleton">
        <property name="properties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <prop key="hibernate.dialect">org.hibernatespatial.mysql.MySQLSpatialDialect</prop>
                <prop key="hibernate.query.substitutions">true 'T', false 'F'</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.connection.useUnicode">true</prop>
                <prop key="hibernate.connection.charSet">utf8</prop>
                <prop key="hibernate.connection.characterEncoding">utf8</prop>

                <prop key="hibernate.c3p0.minPoolSize">2</prop>
                <prop key="hibernate.c3p0.maxPoolSize">5</prop>
                <prop key="hibernate.c3p0.timeout">0</prop>
                <prop key="hibernate.c3p0.max_statement">50</prop>
                <prop key="hibernate.c3p0.idle_test_period">300</prop>

                <prop key="hibernate.c3p0.testConnectionOnCheckout">false</prop>

                <!-- Config 2nd level cache -->
                <prop key="hibernate.generate_statistics">false</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>

                <prop key="hibernate.current_session_context_class">thread</prop>
            </props>
        </property>
    </bean>

    <!-- DA T A  S O U R C E -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />
        <property name="initialSize" value="5" />
        <property name="maxActive" value="5" />
        <property name="maxIdle" value="2" />
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testOnBorrow" value="true"/>
    </bean>

    <bean name="log4jLogger" class="org.apache.log4j.Logger" factory-method="getRootLogger"></bean>
    <bean id="log4jInitialization" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.springframework.util.Log4jConfigurer" />
        <property name="targetMethod" value="initLogging" />
        <property name="arguments">
            <list>
                <value>src/log4j.properties</value>
            </list>
        </property>
    </bean>

	<!-- CONFIG -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="src/config.properties" />
	</bean>
</beans>
